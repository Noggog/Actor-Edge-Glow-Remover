using System;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;

namespace RemoveEdgeGlow
{
    public static class Program
    {
        internal static Lazy<Settings> _lazySettings = null!;
        internal static Settings Settings => _lazySettings.Value;

        // Main
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _lazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "RemoveEdgeGlow.esp")
                .Run(args)
                .ConfigureAwait(false);
        }

        // PatchMain
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine("\n\nInitialization Complete.\nBeginning Process...\n");
            int countChanges = 0; // count modified records

            foreach (var efsh in state.LoadOrder.PriorityOrder.EffectShader().WinningOverrides())
            {
                if ( Settings.IsBlacklisted(efsh.FormKey) || efsh.EditorID == null )
                    continue;

                var efshCopy = efsh.DeepCopy();

                if (Settings.ApplyChanges(ref efshCopy, out var subrecordChangeCount) && subrecordChangeCount > 0)
                {
                    ++countChanges;
                    state.PatchMod.EffectShaders.Set(efshCopy);
                    Console.WriteLine($"Modified {subrecordChangeCount} values in {efsh.EditorID}");
                }
            }

            if (countChanges == 0)
                Console.WriteLine("Failed to modify any records! Check your settings!");
            Console.WriteLine($"\nProcess Complete.\nPatched {countChanges} record{(countChanges > 1 ? "s" : "")}.\n");
        }
    }
}
