using System;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using RemoveEdgeGlow.Settings;

namespace RemoveEdgeGlow
{
    public static class Program
    {
        internal static Lazy<TopSettings> _lazySettings = null!;
        internal static TopSettings Settings => _lazySettings.Value;

        // Main
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _lazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "RemoveEdgeGlow.esp")
                .Run(args)
                .ConfigureAwait(false);
        }

        // PatchMain
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine();
            // Check string matchlist in EffectShader
            if (Settings.EffectShader.GetInvalidEntryCount(out var inv_count))
            {
                Console.WriteLine($"[WARN]\tCommonNames list in section {Constants.EffectShaderSectionName} contains {inv_count} entries that are too short and have been removed.");
            }
            // Check string matchlist in ArtObject
            if (Settings.ArtObject.GetInvalidEntryCount(out inv_count))
            {
                Console.WriteLine($"[WARN]\tCommonNames list in section {Constants.ArtObjectSectionName} contains {inv_count} entries that are too short and have been removed.");
            }

            Console.WriteLine("\nInitialization Complete.\nBeginning Process...\n");

            int changes = 0; // count modified records

            // iterate through all art objects
            foreach (var arto in state.LoadOrder.PriorityOrder.ArtObject().WinningOverrides())
            {
                if (Settings.IsBlacklisted(arto) || arto.EditorID == null)
                    continue;

                var artoCopy = arto.DeepCopy();

                if (Settings.ApplySettingsTo(ref artoCopy))
                {
                    //++changes;
                    state.PatchMod.ArtObjects.Set(artoCopy);
                    Console.WriteLine($"[{++changes}]\tSet {arto.EditorID} model filepath to {Settings.ArtObject.EmptyEffectModel}");
                }
            }
            // iterate through all effect shaders
            foreach (var efsh in state.LoadOrder.PriorityOrder.EffectShader().WinningOverrides())
            {
                if ( Settings.IsBlacklisted(efsh) || efsh.EditorID == null )
                    continue;

                var efshCopy = efsh.DeepCopy();

                if (Settings.ApplySettingsTo(ref efshCopy, out var subrecordChangeCount) && subrecordChangeCount > 0)
                {
                    state.PatchMod.EffectShaders.Set(efshCopy);
                    Console.WriteLine($"[{++changes}]\tModified {subrecordChangeCount} value{(subrecordChangeCount > 1 ? "s" : "")} in {efsh.EditorID}");
                }
            }

            if (changes == 0)
                Console.WriteLine("Failed to modify any records! Check your settings!");
            Console.WriteLine($"\nProcess Complete.\nPatched {changes} record{(changes > 1 ? "s" : "")}.\n");
        }
    }
}
